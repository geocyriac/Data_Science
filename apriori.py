import itertools
import pandas as pd
from collections import defaultdict

class Apriori:
    def __init__(self, min_support=0.5, min_confidence=0.7):
        self.min_support = min_support  # Minimum support threshold
        self.min_confidence = min_confidence  # Minimum confidence threshold
        self.frequent_itemsets = []
        self.rules = []

    def fit(self, transactions):
        """
        Apply the Apriori algorithm to find frequent itemsets and association rules.
        """
        # Step 1: Generate frequent itemsets
        self.frequent_itemsets = self._get_frequent_itemsets(transactions)
        
        # Step 2: Generate association rules
        self.rules = self._generate_association_rules(self.frequent_itemsets, transactions)

    def _get_frequent_itemsets(self, transactions):
        """
        Generate frequent itemsets using the Apriori algorithm.
        """
        itemsets = defaultdict(int)
        
        # Step 1: Count the frequency of individual items
        for transaction in transactions:
            for item in transaction:
                itemsets[frozenset([item])] += 1
        
        total_transactions = len(transactions)
        frequent_itemsets = {}
        
        # Filter itemsets by support
        for itemset, count in itemsets.items():
            support = count / total_transactions
            if support >= self.min_support:
                frequent_itemsets[itemset] = support
        
        # Step 2: Iteratively generate larger itemsets
        k = 2
        while True:
            candidates = defaultdict(int)
            for itemset1, itemset2 in itertools.combinations(frequent_itemsets.keys(), 2):
                union_itemset = itemset1 | itemset2
                if len(union_itemset) == k:
                    for transaction in transactions:
                        if union_itemset.issubset(transaction):
                            candidates[union_itemset] += 1
            
            if not candidates:
                break

            for itemset, count in candidates.items():
                support = count / total_transactions
                if support >= self.min_support:
                    frequent_itemsets[itemset] = support
            
            k += 1
        
        return frequent_itemsets

    def _generate_association_rules(self, frequent_itemsets, transactions):
        """
        Generate association rules from frequent itemsets.
        """
        rules = []
        total_transactions = len(transactions)
        
        for itemset, support in frequent_itemsets.items():
            if len(itemset) > 1:
                subsets = list(itertools.chain.from_iterable(itertools.combinations(itemset, r) for r in range(1, len(itemset))))
                for subset in subsets:
                    antecedent = frozenset(subset)
                    consequent = itemset - antecedent
                    
                    antecedent_count = sum(1 for transaction in transactions if antecedent.issubset(transaction))
                    confidence = support / (antecedent_count / total_transactions)
                    
                    if confidence >= self.min_confidence:
                        rule = {
                            'antecedent': antecedent,
                            'consequent': consequent,
                            'support': support,
                            'confidence': confidence
                        }
                        rules.append(rule)
        
        return rules

    def get_frequent_itemsets(self):
        """
        Return the frequent itemsets found by the algorithm.
        """
        return self.frequent_itemsets

    def get_association_rules(self):
        """
        Return the association rules generated by the algorithm.
        """
        return self.rules


# Example usage
if __name__ == "__main__":
    transactions = [
        {'milk', 'bread', 'butter'},
        {'milk', 'bread'},
        {'bread', 'butter'},
        {'milk', 'bread', 'butter', 'jam'},
        {'milk', 'butter'},
    ]
    
    # Initialize Apriori with min_support=0.5 and min_confidence=0.7
    apriori = Apriori(min_support=0.5, min_confidence=0.7)
    
    # Fit the model
    apriori.fit(transactions)
    
    # Get the frequent itemsets
    frequent_itemsets = apriori.get_frequent_itemsets()
    print("Frequent Itemsets:")
    for itemset, support in frequent_itemsets.items():
        print(f"{set(itemset)}: {support:.2f}")
    
    # Get the association rules
    association_rules = apriori.get_association_rules()
    print("\nAssociation Rules:")
    for rule in association_rules:
        print(f"Rule: {set(rule['antecedent'])} -> {set(rule['consequent'])} | "
              f"Support: {rule['support']:.2f} | Confidence: {rule['confidence']:.2f}")
